<?php

/**
 * Implementation of hook_menu().
 */
function path_redirect_import_menu() {
  $items['admin/config/search/redirect/import'] = array(
    'title' => 'Import',
    'description' => 'Import from CSV file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_import_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/*
 *  form for import redirect path
 */
function path_redirect_import_form() {
  $form = array();
  $form['csv'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import from .csv file'),
    '#description' => t('To import redirects, you must create a CSV file in the same format as <a href="@sample_url">this sample file</a>.',
                        array('@sample_url' => base_path() . drupal_get_path('module', 'path_redirect_import') . '/redirect-import-sample.csv'))
  );
  $form['csv']['csv_file'] = array(
    '#type' => 'file',
    '#description' => t('The CSV file must include columns in the following order: "From URL","To URL","Redirect Code" (defaults to 301)'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  return $form;
}
/*
 * validate form function
 */
function path_redirect_import_form_validate($form, &$form_state) {
  $validators = array('file_validate_extensions' => array('csv'));
  if ($file = file_save_upload('csv_file', $validators)) {
    $form_state['uploaded_file'] = $file;
  }
  else {
    form_set_error('form', t('File upload failed.'));
  }
}
/*
 * Submit form function
 */
function path_redirect_import_form_submit($form, &$form_state) {
  ini_set('auto_detect_line_endings', TRUE);
  if (!isset($form_state['uploaded_file'])) {
    return;
  }
  if (!$f = fopen($form_state['uploaded_file']->uri, 'r')) {
    form_set_error('form', t("Could not open uploaded file."));
  }
  $line_no = 0;
  $count = 0;
  while ($line = fgetcsv($f, 1024, ",")) {
    $line_no++;
    if ($line_no == 1) {
      continue;
    }
    $error = '';
    if (!is_array($line)) {
      $error .= t('Line %line_no is invalid.', array('%line_no' => $line_no)) . '<br />';
    }
    if (empty($line[0]) || empty($line[1])) {
      $error .= t('Line %line_no contains invalid data.', array('%line_no' => $line_no)) . '<br />';
    }
    if (empty($line[2])) {
      $line[2] = '301';
    }
    $data = array(
      'source' => $line[0],
      'redirect' => $line[1],
      'state_code' => $line[2],
    );
    if ($error == '') {
      if (!path_redirect_import_save_data($data)) {
        drupal_set_message(t('Inserting the data in the database has failed.'), 'error');
      }
      else{
        $count++;
      }
    }
    else {
      drupal_set_message($error, 'error');
    }
  }
  fclose($f);
  file_delete($form_state['uploaded_file']);
  if ($count > 0) {
    drupal_set_message(t('%count row(s) imported.', array('%count' => $count)), 'message');
  }
}

/*
 * Function for save data from .csv file into the database
 */
function path_redirect_import_save_data($data) {
  $redirect = (object)$data;
  $redirect->override = 0;
  $redirect_path = $redirect->redirect;
  if ($redirect->redirect != '<front>') {
    $parts = redirect_parse_url($redirect->redirect);
    if (!empty($parts['fragment'])) {
      $redirect->redirect_options['fragment'] = $parts['fragment'];
    }
    if (!empty($parts['query'])) {
      $redirect->redirect_options['query'] = $parts['query'];
    }
    if (!empty($parts['scheme']) && $parts['scheme'] == 'https') {
      $redirect->redirect_options['https'] = TRUE;
    }
    if (!url_is_external($parts['url'])) {
      if (drupal_lookup_path('source', $parts['url'], LANGUAGE_NONE)) {
        $redirect->redirect = drupal_get_normal_path($parts['url'], LANGUAGE_NONE);
      }
      else {
        $redirect->redirect = FALSE;
      }
    }
    else {
      $redirect->redirect = $parts['url'];
    }
  }
  redirect_object_prepare($redirect);
  redirect_hash($redirect);
  if ($existing = redirect_load_by_hash($redirect->hash)) {
    drupal_set_message(t('The source "@source" is already being redirected', array('@source' => $redirect->source)));
  }
  elseif (empty($redirect->redirect)) {
    drupal_set_message(t('The destination "@dest" URL/path does not exist', array('@dest' => $redirect_path)));
  }
  else {
    redirect_save($redirect);
  }
  return TRUE;
}
